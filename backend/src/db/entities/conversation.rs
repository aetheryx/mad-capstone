//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "conversation")]
#[typeshare::typeshare]
pub struct Model {
  #[sea_orm(primary_key)]
  pub id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::conversation_message::Entity")]
  ConversationMessage,
  #[sea_orm(has_many = "super::participant::Entity")]
  Participant,
}

impl Related<super::conversation_message::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::ConversationMessage.def()
  }
}

impl Related<super::participant::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Participant.def()
  }
}

impl Related<super::user::Entity> for Entity {
  fn to() -> RelationDef {
    super::participant::Relation::User.def()
  }
  fn via() -> Option<RelationDef> {
    Some(super::participant::Relation::Conversation.def().rev())
  }
}

impl ActiveModelBehavior for ActiveModel {}
